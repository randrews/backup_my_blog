<script type="text/javascript">
     /* The indentation on this JS is somewhat bad. Emacs' fault. */

     var POLLER=null; // This is a PeriodicalExecuter, in case findError has a problem it can shut down polling.

// Handler for the backup button
// Creates a job and calls runJob
function startBackup(){
    new Ajax.Request('/backup_jobs.json',
		     {method:'POST',
			     parameters:{url:$F('url')},
			     onSuccess:function(req){
			     findError(req,function(json){
				     runJob(json.backup_job);
				 });
			 }
		     });
}

// Utility function, takes a request and complains if something went wrong in it.
// Otherwise, sends the JSON in the request to its second parameter.
function findError(req,fn){
    if(req.responseJSON.success){
	fn(req.responseJSON);
    }else{
	if(POLLER){POLLER.stop();}
	$('backupStatusDiv').style.display='none';
	$('backupLinkDiv').style.display='none';
	$('backupFormDiv').style.display='none';
	$('backupErrorDiv').style.display='block';
	$('backupErrorDiv').update(req.responseJSON.error);
    }
}

// Starts a job running, hides the form and shows the progress bar
// Starts polling.
function runJob(job){
    JOB=job;
    new Ajax.Request('/backup_jobs/start/'+job.id+'.json',
		     {method:'POST',
			     onSuccess:
			 function(req){
			     findError(req,function(json){
				     $('backupFormDiv').style.display='none';
				     $('backupStatusDiv').style.display='block';
				     startPolling(job);
				 });
			 }});
}

// Polls once a second to see job status.
function startPolling(job){
    POLLER=new PeriodicalExecuter(function(poller){
	    new Ajax.Request('/backup_jobs/'+job.id+'.json',
    {method:"GET",
	onSuccess:function(req){
	    findError(req,function(json){
		    try{
			if(updateProgressBar(json.backup_job)){
			    poller.stop();
			    showFinished(json.download_url);
			}
		    }catch(e){
			$('backupStatusDiv').style.display='none';
			$('backupErrorDiv').style.display='block';
			$('backupErrorDiv').update(e);
			poller.stop();
		    }
		});
	}});
	}, 1);
}

// Called by POLLER to do the heavy lifting of updating the progress bar.
// Returns true if the polling should stop.
function updateProgressBar(job){
    if(job.status=='error'){
	throw job.error;
    }

    if(job.status!='new'){
	var finished=job.finished || 0;
	var total=job.total;
	$('backupStatusCount').update("Downloading articles: "+finished+"/"+total);
	$('progress').style.width=(finished/total*100)+"%";
    }
    return (job.status=='finished' || job.status=='error');
}

// Hides the progress bar and shows the download link.
function showFinished(url){
    $('backupStatusDiv').style.display='none';
    $('backupLink').href=url;
    $('backupLinkDiv').style.display='block';
}
</script>

<h1>BackupMyBlog</h1>

<div id="backupFormDiv">
  Enter the URL of your blog (including the http:// part):
  <input type="text" name="url" id="url" value="http://rbandrews.livejournal.com">
  <input type="button" value="Backup" onclick="startBackup()">
</div>

<div id="backupStatusDiv" style="display:none">
  <div id="progressBar"><div id="progress"></div></div>
  <div id="backupStatusCount">Reading the RSS feed...</div>
</div>

<div id="backupLinkDiv" style="display:none">
  Complete! Download your backup <a href="" id="backupLink">here</a>.
</div>

<div id="backupErrorDiv" style="display:none"></div>
